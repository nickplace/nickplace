{"version":3,"sources":["logo.svg","TimeElapsedString.js","TimeElapsed.js","ProfileChart.js","patient.js","PatientCard.js","profile.js","SingleProfile.js","PatientProfiles.js","SinglePatient.js","Nav.js","ProfileList.js","PatientList.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimeElapsedString","ISODateStart","ISODateEnd","timeElapsed","dateStart","Date","parse","getTime","Math","floor","slice","TimeElapsed","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","document","getElementById","scrollLeft","profile","testBeganAt","setInterval","timeElapsedString","testEndedAt","setState","react_default","a","createElement","style","textAlign","marginTop","Component","ProfileChart","ds","DataSet","oscillations","map","oscillation","half","coagulationIndex","dv","createView","source","transform","type","fields","key","value","colsDateScale","colsAngleScale","length","lastOscillation","max","maxDate","min","tickInterval","nice","cols","ci","BizCharts","padding","height","width","data","scale","name","position","label","formatter","val","concat","textStyle","fill","grid","lineStyle","stroke","parseInt","lineDash","crosshairs","size","color","nextProps","prevState","console","log","ALL_PATIENTS","gql","_templateObject","GET_PATIENT","_templateObject2","PATIENT_PROFILES","_templateObject3","PatientCard","patientId","class","react_apollo_browser_umd","query","variables","id","pollInterval","_ref","loading","error","_data$patient","patient","hospitalID","bloodType","dateOfBirth","ethnicity","updatedAt","profiles","createdAt","scope","href","profile_templateObject","ALL_PROFILES","profile_templateObject2","GET_PROFILE","profile_templateObject3","SingleProfile","_templateObject4","_templateObject5","_this2","match","params","message","statusText","status","statusClass","patientName","toLocaleString","videoName","Tr","rOscillation","Tk","kOscillation","alpha","alphaAngle","toFixed","ma","maOscillation","ly30ratio","ly30Ratio","window","location","pathname","includes","className","overflow","src_ProfileChart","src_TimeElapsed","paramJsx","detailJsx","src_PatientCard","PatientProfiles","SinglePatient","src_PatientProfiles","Nav","NavLink","to","activeClassName","src","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ProfileList","allProfiles","PatientList","allPatients","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","BrowserRouter","Nav_Nav","Route","path","component","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00a4fc57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function TimeElapsedString(ISODateStart, ISODateEnd) {\n\tlet timeElapsed = 0\n\n\tif (typeof(ISODateStart) == 'number') {\n\t\ttimeElapsed = ISODateStart\n\t} else {\n\t  let dateStart = (typeof(ISODateStart) == 'string') ? Date.parse(ISODateStart) : ISODateStart.getTime()\n\t  let dateEnd = (typeof(ISODateEnd) == 'string') ? Date.parse(ISODateEnd) : ISODateEnd.getTime()\n\t  timeElapsed = dateEnd - dateStart\n\t}\n\n  let min = (\"00\" + Math.floor(timeElapsed/1000/60)).slice(-2)\n  let sec = (\"00\" + Math.floor(timeElapsed/1000) % 60).slice(-2)\n  let ms = (\"00\" + timeElapsed % 1000).slice(-2)\n\n  return min+':'+sec+'.'+ms\n}","import React, { Component } from 'react';\n\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend, View, Guide, Shape } from 'bizcharts';\nimport DataSet from '@antv/data-set';\n\nimport TimeElapsedString from './TimeElapsedString'\n// import { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws'\n\nclass TimeElapsed extends Component {\n  constructor(props) {\n    super(props)\n    this.state ={\n      timeElapsed: '00:00.00'\n    }\n  }\n\n  componentDidMount() {\n    document.getElementById(\"chart\").scrollLeft = 100000;\n    var _this = this\n\n    // set an interval to update time elapsed label\n    if (_this.props.profile.testBeganAt != null)\n      setInterval(function() {\n        let timeStarted = _this.props.profile.testBeganAt\n        let timeEnded = (_this.props.profile.testEndedAt == null) ? new Date() :  _this.props.profile.testEndedAt\n\n        let timeElapsedString = TimeElapsedString(timeStarted, timeEnded)\n\n        _this.setState({timeElapsed: timeElapsedString})\n      }, 10)\n\n  }\n  render() {\n    return (<h1 style={{textAlign:'center', marginTop: '-.5em'}}>\n              {this.state.timeElapsed}</h1>);\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default TimeElapsed\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\n\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend, View, Guide, Shape } from 'bizcharts';\nimport DataSet from '@antv/data-set';\nimport TimeElapsedString from './TimeElapsedString';\n// import { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws'\n\nclass ProfileChart extends Component {\n  constructor(props) {\n    super(props)\n\n    let ds = new DataSet();\n\n    props.profile.oscillations.map(oscillation => {\n      let half = oscillation.coagulationIndex/2\n      oscillation.coagulationIndex = [half, -half]\n      return oscillation\n    });\n\n    let dv = ds.createView().source(props.profile.oscillations);\n    dv.transform({\n      type: 'fold',\n      // fields: [ 'minAngle', 'maxAngle' ], // 展开字段集\n      fields: [ 'coagulationIndex' ], // 展开字段集\n      key: 'time', // key字段\n      value: 'ci', // value字段\n    }); \n\n    this.state = {\n      dv: dv\n    }\n  }\n\n  componentDidMount() {\n    document.getElementById(\"chart\").scrollLeft = 1000000;\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState){\n    let oscillations = nextProps.profile.oscillations\n    oscillations.map(oscillation => {\n      if (typeof(oscillation.coagulationIndex) != 'object') {\n        let half = oscillation.coagulationIndex/2\n        oscillation.coagulationIndex = [half, -half]\n      }\n      return oscillation\n    });\n\n    console.log(oscillations)\n    return {dv: prevState.dv.source(oscillations)}\n  }\n\n  render() {\n\n    let colsDateScale = {};\n    let colsAngleScale = {};\n    if (this.props.profile.oscillations.length > 0) {\n      var lastOscillation = this.props.profile.oscillations[this.props.profile.oscillations.length-1]\n      var firstOscillation = this.props.profile.oscillations[(this.props.profile.oscillations.length > 1) ? 1 : 0]\n\n      colsDateScale = {\n        max: lastOscillation.maxDate, \n        min: lastOscillation.maxDate - 3200000,\n        tickInterval: 160000,\n        nice: false\n      }\n      // colsAngleScale = {max: firstOscillation.maxAngle + .1, min: firstOscillation.minAngle - .1}\n      colsAngleScale = {max: 40, min: -40}\n    }\n\n    let cols = {\n      ci: colsAngleScale,\n      maxDate: colsDateScale\n    }\n\n    return   (   \n      <Chart \n        padding={[30,75,20,50]} \n        height={200} \n        width={2000} \n        data={this.state.dv} \n        scale={cols} >\n\n        <Axis\n          name=\"ci\"\n          position=\"right\"\n          label={\n            {\n              formatter: val => `${val} mm`,\n              textStyle:{fill:\"#000\"}\n            }\n          }\n          grid={\n            {lineStyle:{\n              stroke:\"#ccc\"}\n            }\n          }/>\n\n        <Axis\n          name=\"maxDate\"\n          position=\"bottom\"\n          label={\n            {\n              formatter: val => TimeElapsedString(parseInt(val)),\n              textStyle:{fill:\"#000\"}\n            }\n          }\n          grid={\n            {lineStyle:{\n              stroke:\"#ccc\", \n              lineDash: [4, 4]}\n            }\n          }/>\n\n\n        <Tooltip crosshairs={{type : \"y\"}}/>\n        <Geom type=\"line\" position=\"maxDate*ci\" size={3} color={'time', ['#007bff', '#007bff']}/>\n      \n      </Chart>\n    )\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default ProfileChart\n","import gql from 'graphql-tag'\n\nexport const ALL_PATIENTS = gql`\n  query {\n    allPatients(orderBy: createdAt_DESC) {\n        id,\n        hospitalID,\n        name,\n        bloodType,\n        dateOfBirth,\n        ethnicity,\n        profiles {\n            id\n        },\n        createdAt,\n        updatedAt\n    }\n}`\n\nexport const GET_PATIENT = gql`\n  query patientQuery($id: ID!) {\n    patient: Patient(id: $id) {\n        id,\n        hospitalID,\n        name,\n        bloodType,\n        dateOfBirth,\n        ethnicity,\n        profiles {\n            id\n        },\n        createdAt,\n        updatedAt\n    }\n}`\n\nexport const PATIENT_PROFILES = gql`\n  query patientProfiles($id: ID!) {\n    patient: Patient(id: $id) {\n        id,\n        profiles {\n            id,\n\n            # timestamps\n            createdAt,\n            updatedAt,\n            bloodInjectedAt,\n            testBeganAt,\n            testEndedAt,\n\n            # options\n            requireLevelSurface,\n            requirePatient,\n            videoName,\n            status,\n\n            oscillations {\n                id\n            }\n\n            patient {\n                id,\n                name\n            }\n        }\n    }\n}`\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\n\nimport {GET_PATIENT} from './patient'\n\nclass PatientCard extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let _this = this\n\n    if (this.props.patientId == null) {\n      return (\n        <div class=\"card patient-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Empty Patient</h5>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <Query query={GET_PATIENT} variables={{ id:  _this.props.patientId }} pollInterval={1000}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n            } else {\n              let { id, hospitalID, name, bloodType, dateOfBirth, ethnicity, profiles, createdAt, updatedAt} = data.patient\n              return (\n                <div class=\"card patient-card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{name}</h5>\n                    <h6 class=\"card-subtitle mb-2 text-muted\">{hospitalID}</h6>\n                      <table class=\"table\">\n                        <tbody>\n                          <tr scope=\"row\"><th>Date of Birth:</th> <td> {dateOfBirth || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Blood Type:</th> <td> {bloodType || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Ethnicity:</th> <td> {ethnicity || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Updated At:</th> <td> {updatedAt || '..'}</td></tr>\n                        </tbody>\n                      </table>\n\n                      <div class=\"text-right\">\n                        <a href=\"#\" class=\"card-link\">Edit</a>\n                        <a href=\"#\" class=\"card-link\">Delete</a>\n                      </div>\n                  </div>\n                </div>\n              )\n            }\n          }}\n        </Query>\n      );\n    }\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default PatientCard\n","import gql from 'graphql-tag'\n\nexport const CREATE_PROFILE = gql`\n  mutation ($requireLevelSurface: Boolean!, $requirePatient: Boolean!, $videoName: String){\n    createProfile(\n        requireLevelSurface: $requireLevelSurface, \n        requirePatient: $requirePatient,\n        videoName: $videoName,\n        status: 0) {\n      id\n    }\n  }\n`\n\nexport const ALL_PROFILES = gql`\n  query {\n    allProfiles(orderBy: createdAt_DESC) {\n        id,\n\n        # timestamps\n        createdAt,\n        updatedAt,\n        bloodInjectedAt,\n        testBeganAt,\n        testEndedAt,\n\n        videoName,\n        status,\n\n        #parameters\n        rOscillation {\n            maxDate\n        },\n        kOscillation{\n            maxDate\n        },\n        alphaAngle,\n        maOscillation{\n            maxDate, coagulationIndex\n        },\n        ly30Ratio,\n        ly30Oscillation{\n            maxDate\n        },\n        baselineSweepWidth,\n        baselineOscillation{\n            maxDate\n        },\n        oscillations {\n            id\n        }\n        patient {\n            id\n        }\n    }\n  }`\n\nexport const GET_PROFILE = gql`\n  query profileQuery($id: ID!) {\n    profile: Profile(id: $id) {\n        id,\n\n        # timestamps\n        createdAt,\n        updatedAt,\n        bloodInjectedAt,\n        testBeganAt,\n        testEndedAt,\n\n        # options\n        requireLevelSurface,\n        requirePatient,\n        videoName,\n        status,\n\n        #parameters\n        rOscillation {\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        kOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        alphaAngle,\n        maOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        ly30Ratio,\n        ly30Oscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        baselineSweepWidth,\n        baselineOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n\n        oscillations {\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex\n        }\n\n        patient {\n            id\n        }\n    }\n  }`\n\nexport const UPDATE_PROFILE_MUTATION = gql`\n  mutation($profileId: ID!,\n    $testBeganAt: DateTime,\n    $testEndedAt: DateTime,\n    $bloodInjectedAt: DateTime,\n    $status: Int,\n    $baselineSweepWidth: Float,\n    $baselineOscillationId: ID,\n    $rOscillationId: ID,\n    $kOscillationId: ID,\n    $alphaAngle: Float,\n    $maOscillationId: ID,\n    $ly30Ratio: Float,\n    $ly30OscillationId: ID ) {\n\n    updateProfile(  id: $profileId, \n                    testBeganAt: $testBeganAt,\n                    testEndedAt: $testEndedAt,\n                    bloodInjectedAt: $bloodInjectedAt,\n                    status: $status,\n                    baselineSweepWidth: $baselineSweepWidth,\n                    baselineOscillationId: $baselineOscillationId,\n                    rOscillationId: $rOscillationId,\n                    kOscillationId: $kOscillationId,\n                    alphaAngle: $alphaAngle,\n                    maOscillationId: $maOscillationId,\n                    ly30Ratio: $ly30Ratio,\n                    ly30OscillationId: $ly30OscillationId  ) {\n        id\n    }\n  }`\n\n\nexport const ADD_OSCILLATION_ON_PROFILE = gql`\n  mutation ($coagulationIndex: Float!, $maxAngle: Float!, $maxDate: Float!, $minAngle: Float!, $minDate: Float!, $profileId: ID!){\n    createOscillation (coagulationIndex: $coagulationIndex, maxAngle: $maxAngle, maxDate: $maxDate, minAngle: $minAngle, minDate: $minDate, profileId: $profileId) {\n      id\n      profile {\n        id\n      }\n    }\n  }\n`\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\n\nimport PatientCard from './PatientCard'\n\nimport {GET_PROFILE} from './profile'\n\nclass SingleProfile extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let _this = this\n\n    return (\n          <Query query={GET_PROFILE} variables={{ id:  _this.props.match.params.id }} pollInterval={1000}>\n            {({ loading, error, data }) => {\n              if (loading) return (\n                  <div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n              if (error) return (\n                  <div>\n                      {error.message}\n                  </div>);\n\n              let profile = data.profile\n              let patient = data.patient\n\n              let statusText = (profile.status < 2) ? \"In Progress\" : \"Completed\"\n              let statusClass = (profile.status < 2) ? \"badge-info\" : \"badge-success\"\n\n              let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n              let testBeganAt = profile.testBeganAt == null ? \"Waiting...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n              let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n              let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n              let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n              let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n              let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n              let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n\n              return (\n                <div class=\"profile-page\">\n                  <div class=\"col-md-7\">\n                    <a class=\"btn btn-link\" href={\"/profiles\"+(window.location.pathname.includes('api') ? '/api' : '')}>← All Profiles</a>\n                    <div className=\"card profile-card\">\n                      <div className=\"card-header text-center\">\n                        <h5 className=\"card-title\">{patientName}</h5>\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{testBeganAt}</h6>\n                      </div>\n                      <div className=\"card-body\">\n                        <div id=\"chart\" style={{width:'100%', textAlign: 'center', overflow:'scroll'}}>\n                          <div style={{height:250}}>\n                            <ProfileChart profile={profile} />\n                          </div>\n                        </div>\n\n                        <div>\n                          <TimeElapsed profile={profile} />\n                          <h5 style={{textAlign:'center'}}>\n                            <span className={\"badge badge-pill \" + statusClass}>\n                              Test Status: {statusText}\n                            </span>\n                          </h5>\n                        </div>\n                      </div>\n                      <div class=\"card-footer\">\n                        {this.paramJsx('T(r)', Tr)}\n                        {this.paramJsx('T(k)', Tk)}\n                        {this.paramJsx('alpha', alpha)}\n                        {this.paramJsx('MA', ma)}\n                        {this.paramJsx('LY30', ly30ratio)}\n\n                        <hr />\n                        {this.detailJsx('Source', source)}\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"col-md-5\">\n                    <h3>Patient</h3>\n                    <PatientCard patientId={patient != null ? patient.id : null} />\n                  </div>\n                </div>\n\n            )\n          }}\n        </Query>\n    );\n  }\n\n  paramJsx(label, value) {\n    return (\n      <div className=\"row\">\n        <div class=\"col-4 text-right\">{label}</div>\n        <div class=\"col\"><strong>{value}</strong></div>\n      </div>\n      );\n  }\n\n  detailJsx(label, value) {\n    return (\n      <div className=\"row\">\n        <div class=\"col-4 text-right\">{label}</div>\n        <div class=\"col\"><strong>{value}</strong></div>\n      </div>\n      );\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default SingleProfile\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsedString from './TimeElapsedString'\n\nimport {PATIENT_PROFILES} from './patient'\n\nclass PatientProfiles extends Component {\n\n  render() {\n    let _this = this\n\n    return (\n        <div class=\"list-group\">\n          <div class=\"list-group-item list-group-item-secondary\">\n            <div class=\"row \">\n              <div class=\"col-sm-2 font-weight-bold\">Patient Name</div>\n              <div class=\"col-sm-2\">Began At</div>\n              <div class=\"col-sm-2\">Oscillations</div>\n              <div class=\"col-sm-4 source-col\">Source</div>\n              <div class=\"col-sm-2\">\n                <span className={\"badge badge-pill badge-primary\"}>Test Status</span>\n              </div>\n            </div>\n          </div>\n\n          <Query query={PATIENT_PROFILES} variables={{id: this.props.patientId}} pollInterval={5000}>\n            {({ loading, error, data }) => {\n              if (loading) return <div>Loading...</div>;\n              if (error) return <div>`Error! ${error.message}`</div>;\n              return (\n                  data.patient.profiles.map(profile => {\n\n                    let patient = profile.patient\n\n                    let statusText = (profile.status < 2) ? \"In Progress\" : \"Completed\"\n                    let statusClass = (profile.status < 2) ? \"badge-info\" : \"badge-success\"\n\n                    let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n                    let testBeganAt = profile.testBeganAt == null ? \"Waiting...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n                    let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n                    let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n                    let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n                    let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n                    let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n                    let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n\n\n                    return (\n                      <a href={\"/profile/\"+profile.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                        <div class=\"row\" key={profile.id}>\n                          <div class=\"col-sm-2\"><strong>{patientName}</strong></div>\n                          \n                          <div class=\"col-sm-2\">{testBeganAt}</div>\n\n                          <div class=\"col-sm-2\">{profile.oscillations.length} Oscillations</div>\n                          <div class=\"col-sm-4 source-col\">{source}</div>\n                          <div class=\"col-sm-2\">\n                            <span className={\"badge badge-pill \" + statusClass}>\n                              {statusText}\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                    )\n                  })\n                )\n            }}\n          </Query>\n      </div>\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default PatientProfiles\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport PatientCard from './PatientCard'\nimport PatientProfiles from './PatientProfiles'\n\nimport {GET_PATIENT} from './patient'\n\nclass SinglePatient extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let _this = this\n\n    return (\n      <div class=\"patient-page\">\n        <div class=\"col-md-5\">\n          <a class=\"btn btn-link\" href={\"/patients\"+(window.location.pathname.includes('api') ? '/api' : '')}>← All Patients</a>\n          <PatientCard patientId={_this.props.match.params.id } />\n        </div>\n        <div class=\"col-md-7\">\n          <h3>Profiles</h3>\n          <PatientProfiles patientId={_this.props.match.params.id} />\n        </div>\n      </div>\n    );\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default SinglePatient\n","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Nav extends Component {\n\trender() {\n\t\treturn (\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        \n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav\">\n            <NavLink to=\"/patients\" className=\"nav-item nav-link\" activeClassName=\"active\">Patients</NavLink>\n            <NavLink to=\"/profiles\" className=\"nav-item nav-link\" activeClassName=\"active\">Profiles</NavLink>\n          </ul>\n\n        </div>\n        <a class=\"navbar-brand\" href=\"#\">\n          <img src=\"ifirst.png\" width=\"30\" height=\"30\"/>\n        </a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n      </nav>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\nimport Nav from './Nav'\n\nimport {ALL_PROFILES} from './profile'\n\nclass ProfileList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      profile: {\n        testBeganAt: 'N/A',\n        oscillations: []},\n      patient: {\n        name:'Unnamed Patient'\n      }\n    }\n  }\n\n  render() {\n    let _this = this\n\n    return (\n      <div class=\"profiles-list\">\n        <h1>Profiles</h1>\n\n          <div class=\"list-group\">\n            <div class=\"list-group-item list-group-item-secondary\">\n              <div class=\"row \">\n                <div class=\"col-sm-2 font-weight-bold\">Patient Name</div>\n                <div class=\"col-sm-2\">Began At</div>\n                <div class=\"col-sm-2\">Oscillations</div>\n                <div class=\"col-sm-4 source-col\">Source</div>\n                <div class=\"col-sm-2\">\n                  <span className={\"badge badge-pill badge-primary\"}>Test Status</span>\n                </div>\n              </div>\n            </div>\n\n            <Query query={ALL_PROFILES} pollInterval={5000}>\n              {({ loading, error, data }) => {\n                if (loading) return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n                if (error) return <div>`Error! ${error.message}`</div>;\n                return (\n                    data.allProfiles.map(profile => {\n\n                      let patient = profile.patient\n\n                      let statusText = (profile.status < 2) ? \"In Progress\" : \"Completed\"\n                      let statusClass = (profile.status < 2) ? \"badge-info\" : \"badge-success\"\n\n                      let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n                      let testBeganAt = profile.testBeganAt == null ? \"Waiting...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n                      let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n                      let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n                      let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n                      let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n                      let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n                      let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n\n\n                      return (\n                        <a href={\"/profile/\"+profile.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                          <div class=\"row\" key={profile.id}>\n                            <div class=\"col-sm-2\"><strong>{patientName}</strong></div>\n                            <div class=\"col-sm-2\">{testBeganAt}</div>\n                            <div class=\"col-sm-2\">{profile.oscillations.length} Oscillations</div>\n                            <div class=\"col-sm-4 source-col\">{source}</div>\n                            <div class=\"col-sm-2\">\n                              <span className={\"badge badge-pill \" + statusClass}>\n                                {statusText}\n                              </span>\n                            </div>\n\n                          </div>\n                        </a>\n                      )\n                    })\n                  )\n              }}\n            </Query>\n            </div>\n      </div>\n\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default ProfileList\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\nimport Nav from './Nav'\n\nimport {ALL_PATIENTS} from './patient'\n\nclass PatientList extends Component {\n  // constructor(props) {\n  //   super(props)\n  //   }\n  // }\n\n  render() {\n    let _this = this\n\n    return (\n      <div>\n        <h1>Patients</h1>\n        <div class=\"list-group\">\n          <Query query={ALL_PATIENTS} pollInterval={5000}>\n            {({ loading, error, data }) => {\n              if (loading) return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n              if (error) return <div>`Error! ${error.message}`</div>;\n              return (\n                  data.allPatients.map(patient => {\n                    let createdAt = new Date(Date.parse(patient.createdAt)).toLocaleString()\n\n                    return (\n                      <a href={\"/patient/\"+patient.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                        {patient.name || patient.hospitalID || '...'}\n                        <span class=\"badge badge-pill badge-primary float-right\">{patient.profiles.length} Profiles</span>\n                      </a>\n                    )\n                  })\n                )\n            }}\n          </Query>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default PatientList\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SingleProfile from './SingleProfile';\nimport SinglePatient from './SinglePatient';\nimport ProfileList from './ProfileList';\nimport PatientList from './PatientList';\nimport Nav from './Nav';\nimport './App.scss';\nimport 'bootstrap';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\n\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-client-preset'\n\n// const httpLink = new HttpLink({ uri:  process.env.API_BASE })\nconst httpLink = new HttpLink({ uri: 'https://api.graph.cool/simple/v1/cjo4sxik93ih50155txkz8m0i' })\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n    <Router>\n      <ApolloProvider client={client}>\n      \t<div class=\"App-body\">\n\t        {window.location.pathname.includes('api') ? null :  <Nav /> }\n\t        <div class=\"App-content\">\n\t\t        <Route path=\"/profiles\" component={ProfileList} />\n\t\t        <Route path=\"/patients\" component={PatientList} />\n\t\t        <Route path=\"/profile/:id\" component={SingleProfile} />\n\t\t        <Route path=\"/patient/:id\" component={SinglePatient} />\n\t        </div>\n        </div>\n      </ApolloProvider>\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}