{"version":3,"sources":["logo.svg","TimeElapsedString.js","TimeElapsed.js","ProfileChart.js","patient.js","PatientCard.js","profile.js","SingleProfile.js","PatientProfiles.js","SinglePatient.js","Nav.js","ProfileList.js","PatientList.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimeElapsedString","ISODateStart","ISODateEnd","timeElapsed","dateStart","Date","parse","getTime","Math","floor","slice","TimeElapsed","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","profile","testBeganAt","setInterval","timeElapsedString","testEndedAt","setState","react_default","a","createElement","style","textAlign","marginTop","Component","ProfileChart","ds","DataSet","oscillations","map","oscillation","half","coagulationIndex","dv","createView","source","transform","type","fields","key","value","colsDateScale","colsAngleScale","length","firstOscillation","min","maxDate","max","tickInterval","nice","cols","ci","BizCharts","padding","height","width","data","scale","name","position","label","formatter","val","concat","textStyle","fill","grid","lineStyle","stroke","parseInt","lineDash","crosshairs","size","color","nextProps","prevState","console","log","ALL_PATIENTS","gql","_templateObject","GET_PATIENT","_templateObject2","PATIENT_PROFILES","_templateObject3","UPDATE_PATIENT_MUTATION","_templateObject4","PatientCard","id","window","confirm","updatePatientMutation","variables","patientId","isArchived","class","react_apollo_browser_umd","query","pollInterval","_ref","loading","error","_data$patient","patient","hospitalID","bloodType","dateOfBirth","ethnicity","updatedAt","profiles","createdAt","archivedBadge","className","scope","href","onClick","deletePatient","compose","graphql","profile_templateObject","ALL_PROFILES","profile_templateObject2","GET_PROFILE","profile_templateObject3","UPDATE_PROFILE_MUTATION","profile_templateObject4","SingleProfile","_templateObject5","updateProfileMutation","profileId","_this2","match","params","message","statusText","status","statusClass","patientName","toLocaleString","cartridgeInsertedAt","bloodInjectedAt","videoName","Tr","rOscillation","Tk","kOscillation","TkDate","alpha","alphaAngle","toFixed","ma","maOscillation","maDate","ly30ratio","ly30Ratio","ly30Date","ly30Oscillation","location","pathname","includes","src_ProfileChart","src_TimeElapsed","margin","paramJsx","detailJsx","deleteProfile","src_PatientCard","timestamp","fontWeight","PatientProfiles","SinglePatient","src_PatientProfiles","Nav","NavLink","to","activeClassName","src","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ProfileList","allProfiles","PatientList","allPatients","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","BrowserRouter","Nav_Nav","Route","exact","path","component","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.845b312a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function TimeElapsedString(ISODateStart, ISODateEnd) {\n\tlet timeElapsed = 0\n\n\tif (typeof(ISODateStart) == 'number') {\n\t\ttimeElapsed = ISODateStart\n\t} else {\n\t  let dateStart = (typeof(ISODateStart) == 'string') ? Date.parse(ISODateStart) : ISODateStart.getTime()\n\t  let dateEnd = (typeof(ISODateEnd) == 'string') ? Date.parse(ISODateEnd) : ISODateEnd.getTime()\n\t  timeElapsed = dateEnd - dateStart\n\t}\n\n  let min = (\"00\" + Math.floor(timeElapsed/1000/60)).slice(-2)\n  let sec = (\"00\" + Math.floor(timeElapsed/1000) % 60).slice(-2)\n  let ms = (\"00\" + timeElapsed % 1000).slice(-2)\n\n  return min+':'+sec+'.'+ms\n}","import React, { Component } from 'react';\n\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend, View, Guide, Shape } from 'bizcharts';\nimport DataSet from '@antv/data-set';\n\nimport TimeElapsedString from './TimeElapsedString'\n// import { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws'\n\nclass TimeElapsed extends Component {\n  constructor(props) {\n    super(props)\n    this.state ={\n      timeElapsed: '00:00.00'\n    }\n  }\n\n  componentDidMount() {\n    var _this = this\n\n    // set an interval to update time elapsed label\n    if (_this.props.profile.testBeganAt != null)\n      setInterval(function() {\n        let timeStarted = _this.props.profile.testBeganAt\n        let timeEnded = (_this.props.profile.testEndedAt == null) ? new Date() :  _this.props.profile.testEndedAt\n\n        let timeElapsedString = TimeElapsedString(timeStarted, timeEnded)\n\n        _this.setState({timeElapsed: timeElapsedString})\n      }, 10)\n\n  }\n  render() {\n    return (<h1 style={{textAlign:'center', marginTop: '-.5em'}}>\n              {this.state.timeElapsed}</h1>);\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default TimeElapsed\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\n\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend, View, Guide, Shape } from 'bizcharts';\nimport DataSet from '@antv/data-set';\nimport TimeElapsedString from './TimeElapsedString';\n// import { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws'\n\nclass ProfileChart extends Component {\n  constructor(props) {\n    super(props)\n\n    let ds = new DataSet();\n\n    props.profile.oscillations.map(oscillation => {\n      let half = oscillation.coagulationIndex/2\n      oscillation.coagulationIndex = [half, -half]\n      return oscillation\n    });\n\n    let dv = ds.createView().source(props.profile.oscillations);\n    dv.transform({\n      type: 'fold',\n      // fields: [ 'minAngle', 'maxAngle' ], // 展开字段集\n      fields: [ 'coagulationIndex' ], // 展开字段集\n      key: 'time', // key字段\n      value: 'ci', // value字段\n    }); \n\n    this.state = {\n      dv: dv\n    }\n  }\n\n  componentDidMount() {\n    // setTimeout(function() {\n    //   document.getElementById(\"chart\").scrollLeft = 1000000;\n    // }, 200)\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState){\n    let oscillations = nextProps.profile.oscillations\n    oscillations.map(oscillation => {\n      if (typeof(oscillation.coagulationIndex) != 'object') {\n        let half = oscillation.coagulationIndex/2\n        oscillation.coagulationIndex = [half, -half]\n      }\n      return oscillation\n    });\n\n    console.log(oscillations)\n    return {dv: prevState.dv.source(oscillations)}\n  }\n\n  render() {\n\n    let colsDateScale = {};\n    let colsAngleScale = {};\n    if (this.props.profile.oscillations.length > 0) {\n      var lastOscillation = this.props.profile.oscillations[this.props.profile.oscillations.length-1]\n      var firstOscillation = this.props.profile.oscillations[(this.props.profile.oscillations.length > 1) ? 1 : 0]\n\n      colsDateScale = {\n        min: firstOscillation.maxDate, \n        max: firstOscillation.maxDate + 3200000,\n        tickInterval: 160000,\n        nice: false\n      }\n      // colsAngleScale = {max: firstOscillation.maxAngle + .1, min: firstOscillation.minAngle - .1}\n      colsAngleScale = {max: 40, min: -40}\n    }\n\n    let cols = {\n      ci: colsAngleScale,\n      maxDate: colsDateScale\n    }\n\n    return   (   \n      <Chart \n        padding={[30,50,20,50]} \n        height={200} \n        width={2000} \n        data={this.state.dv} \n        scale={cols} >\n\n        <Axis\n          name=\"ci\"\n          position=\"left\"\n          label={\n            {\n              formatter: val => `${val} mm`,\n              textStyle:{fill:\"#000\"}\n            }\n          }\n          grid={\n            {lineStyle:{\n              stroke:\"#ccc\"}\n            }\n          }/>\n\n        <Axis\n          name=\"maxDate\"\n          position=\"bottom\"\n          label={\n            {\n              formatter: val => TimeElapsedString(parseInt(val)),\n              textStyle:{fill:\"#000\"}\n            }\n          }\n          grid={\n            {lineStyle:{\n              stroke:\"#ccc\", \n              lineDash: [4, 4]}\n            }\n          }/>\n\n\n        <Tooltip crosshairs={{type : \"y\"}}/>\n        <Geom type=\"line\" position=\"maxDate*ci\" size={2} color={'time', ['#007bff', '#007bff']}/>\n      \n      </Chart>\n    )\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default ProfileChart\n","import gql from 'graphql-tag'\n\nexport const ALL_PATIENTS = gql`\n  query {\n    allPatients(orderBy: createdAt_DESC, filter: { isArchived: false }) {\n        id,\n        hospitalID,\n        name,\n        bloodType,\n        dateOfBirth,\n        ethnicity,\n        profiles {\n            id\n        },\n        createdAt,\n        updatedAt\n    }\n}`\n\nexport const GET_PATIENT = gql`\n  query patientQuery($id: ID!) {\n    patient: Patient(id: $id) {\n        id,\n        isArchived,\n        hospitalID,\n        name,\n        bloodType,\n        dateOfBirth,\n        ethnicity,\n        profiles {\n            id\n        },\n        createdAt,\n        updatedAt\n    }\n}`\n\nexport const PATIENT_PROFILES = gql`\n  query patientProfiles($id: ID!) {\n    patient: Patient(id: $id) {\n        id,\n        profiles(filter: { isArchived: false }) {\n            id,\n            isArchived,\n\n            # timestamps\n            createdAt,\n            updatedAt,\n            bloodInjectedAt,\n            testBeganAt,\n            testEndedAt,\n\n            # options\n            requireLevelSurface,\n            requirePatient,\n            videoName,\n            status,\n\n            oscillations {\n                id\n            }\n\n            patient {\n                id,\n                name\n            }\n        }\n    }\n}`\n\nexport const UPDATE_PATIENT_MUTATION = gql`\n  mutation($patientId: ID!, $isArchived: Boolean) {\n    updatePatient(\n        id: $patientId,\n        isArchived: $isArchived) {\n        id\n    }\n}`\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\n\nimport {GET_PATIENT, UPDATE_PATIENT_MUTATION} from './patient'\n\nclass PatientCard extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  deletePatient(id) {\n    let confirmed = window.confirm(\"Are you sure that you want to archive this patient?\");\n    if (confirmed) {\n      this.props.updatePatientMutation({variables:{patientId: id, isArchived:true}})\n    }\n  }\n\n  render() {\n    let _this = this\n\n    if (this.props.patientId == null) {\n      return (\n        <div class=\"card patient-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Unnamed Patient</h5>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <Query query={GET_PATIENT} variables={{ id:  _this.props.patientId }} pollInterval={1000}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n            } else {\n              let { id, isArchived, hospitalID, name, bloodType, dateOfBirth, ethnicity, profiles, createdAt, updatedAt} = data.patient\n              let archivedBadge = (isArchived == true) ? \n              (<span className={\"badge badge-pill float-right badge-info\"}>\n                Archived\n              </span>) : null\n\n              return (\n                <div class=\"card patient-card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{name}{archivedBadge}</h5>\n                    <h6 class=\"card-subtitle mb-2 text-muted\">{hospitalID}</h6>\n                      <table class=\"table\">\n                        <tbody>\n                          <tr scope=\"row\"><th>Date of Birth:</th> <td> {dateOfBirth || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Blood Type:</th> <td> {bloodType || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Ethnicity:</th> <td> {ethnicity || '..'}</td></tr>\n                          <tr scope=\"row\"><th>Updated At:</th> <td> {updatedAt || '..'}</td></tr>\n                        </tbody>\n                      </table>\n\n                      <hr />\n                      <div class=\"text-right\">\n                        <a href=\"#\" class=\"card-link text-danger\" onClick={() => {\n                          _this.deletePatient(id) }}>Delete</a>\n                      </div>\n                  </div>\n                </div>\n              )\n            }\n          }}\n        </Query>\n      );\n    }\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default compose(\n  graphql(UPDATE_PATIENT_MUTATION, {name: 'updatePatientMutation'}))\n(PatientCard)\n\n","import gql from 'graphql-tag'\n\nexport const CREATE_PROFILE = gql`\n  mutation ($requireLevelSurface: Boolean!, $requirePatient: Boolean!, $videoName: String){\n    createProfile(\n        requireLevelSurface: $requireLevelSurface, \n        requirePatient: $requirePatient,\n        videoName: $videoName,\n        status: 0) {\n      id\n    }\n  }\n`\n\nexport const ALL_PROFILES = gql`\n  query {\n    allProfiles(orderBy: createdAt_DESC, filter: { isArchived: false }) {\n        id,\n\n        # timestamps\n        createdAt,\n        updatedAt,\n        bloodInjectedAt,\n        testBeganAt,\n        testEndedAt,\n\n        videoName,\n        status,\n\n        #parameters\n        rOscillation {\n            id,\n            maxDate\n        },\n        kOscillation{\n            id,\n            maxDate\n        },\n        alphaAngle,\n        maOscillation{\n            id,\n            maxDate, coagulationIndex\n        },\n        ly30Ratio,\n        ly30Oscillation{\n            id,\n            maxDate\n        },\n        baselineSweepWidth,\n        baselineOscillation{\n            id,\n            maxDate\n        },\n        oscillations {\n            id\n        }\n        patient {\n            id,\n            name\n        }\n    }\n  }`\n\nexport const GET_PROFILE = gql`\n  query profileQuery($id: ID!) {\n    profile: Profile(id: $id) {\n        id,\n        isArchived,\n\n        # timestamps\n        createdAt,\n        updatedAt,\n        bloodInjectedAt,\n        cartridgeInsertedAt,\n        testBeganAt,\n        testEndedAt,\n\n        # options\n        requireLevelSurface,\n        requirePatient,\n        videoName,\n        status,\n\n        #parameters\n        rOscillation {\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        kOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        alphaAngle,\n        maOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        ly30Ratio,\n        ly30Oscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n        baselineSweepWidth,\n        baselineOscillation{\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex, createdAt\n        },\n\n        oscillations {\n            id, minAngle, minDate, maxAngle, maxDate, coagulationIndex\n        }\n\n        patient {\n            id,\n            name\n        }\n    }\n  }`\n\nexport const UPDATE_PROFILE_MUTATION = gql`\n  mutation($profileId: ID!,\n    $isArchived: Boolean,\n    $testBeganAt: DateTime,\n    $testEndedAt: DateTime,\n    $bloodInjectedAt: DateTime,\n    $status: Int,\n    $baselineSweepWidth: Float,\n    $baselineOscillationId: ID,\n    $rOscillationId: ID,\n    $kOscillationId: ID,\n    $alphaAngle: Float,\n    $maOscillationId: ID,\n    $ly30Ratio: Float,\n    $ly30OscillationId: ID ) {\n\n    updateProfile(  id: $profileId, \n                    isArchived: $isArchived,\n                    testBeganAt: $testBeganAt,\n                    testEndedAt: $testEndedAt,\n                    bloodInjectedAt: $bloodInjectedAt,\n                    status: $status,\n                    baselineSweepWidth: $baselineSweepWidth,\n                    baselineOscillationId: $baselineOscillationId,\n                    rOscillationId: $rOscillationId,\n                    kOscillationId: $kOscillationId,\n                    alphaAngle: $alphaAngle,\n                    maOscillationId: $maOscillationId,\n                    ly30Ratio: $ly30Ratio,\n                    ly30OscillationId: $ly30OscillationId  ) {\n        id\n    }\n  }`\n\n\nexport const ADD_OSCILLATION_ON_PROFILE = gql`\n  mutation ($coagulationIndex: Float!, $maxAngle: Float!, $maxDate: Float!, $minAngle: Float!, $minDate: Float!, $profileId: ID!){\n    createOscillation (coagulationIndex: $coagulationIndex, maxAngle: $maxAngle, maxDate: $maxDate, minAngle: $minAngle, minDate: $minDate, profileId: $profileId) {\n      id\n      profile {\n        id\n      }\n    }\n  }\n`\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\n\nimport PatientCard from './PatientCard'\n\nimport {GET_PROFILE, UPDATE_PROFILE_MUTATION} from './profile'\n\nclass SingleProfile extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  deleteProfile(id) {\n    let confirmed = window.confirm(\"Are you sure that you want to archive this profile?\");\n    if (confirmed) {\n      this.props.updateProfileMutation({variables:{profileId: id, isArchived:true}})\n    }\n  }\n\n  render() {\n    let _this = this\n\n    return (\n          <Query query={GET_PROFILE} variables={{ id:  _this.props.match.params.id }} pollInterval={1000}>\n            {({ loading, error, data }) => {\n              if (loading) return (\n                  <div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n              if (error) return (\n                  <div>\n                      {error.message}\n                  </div>);\n\n              let profile = data.profile\n              let patient = data.patient\n\n              let statuses = ['New', 'In progress', 'Completed', 'Errored']\n              let statusClasses = ['badge-secondary', 'badge-info', 'badge-success', 'badge-danger']\n              let statusText = statuses[profile.status]\n              let statusClass = statusClasses[profile.status]\n\n              let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n              let testBeganAt = profile.testBeganAt == null ? \"...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n              let testEndedAt = profile.testEndedAt == null ? \"...\" : new Date(Date.parse(profile.testEndedAt)).toLocaleString()\n              let createdAt = profile.createdAt == null ? \"...\" : new Date(Date.parse(profile.createdAt)).toLocaleString()\n              let cartridgeInsertedAt = profile.cartridgeInsertedAt == null ? \"...\" : new Date(Date.parse(profile.cartridgeInsertedAt)).toLocaleString()\n              let bloodInjectedAt = profile.bloodInjectedAt == null ? \"...\" : new Date(Date.parse(profile.bloodInjectedAt)).toLocaleString()\n              let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n              let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n              let TrDate = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n              let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n              let TkDate = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate)\n              let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n              let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n              let maDate = profile.maOscillation == null ? \"...\" : TimeElapsedString(profile.maOscillation.maxDate)\n              let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n              let ly30Date = profile.ly30Oscillation == null ? \"...\" : TimeElapsedString(profile.ly30Oscillation.maxDate)\n\n              let archivedBadge = (profile.isArchived == true) ? \n                (<span className={\"badge badge-pill float-right badge-info\"}>\n                  Archived\n                </span>) : null\n              return (\n                <div class=\"profile-page\">\n                  <div class=\"col-md-7\">\n                    <a class=\"btn btn-link\" href={\"/profiles\"+(window.location.pathname.includes('api') ? '/api' : '')}>← All Profiles</a>\n                    {archivedBadge}\n                    <div className=\"card profile-card\">\n                      <div className=\"card-header text-center\">\n                        <h5 className=\"card-title\">{patientName}</h5>\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{testBeganAt}</h6>\n                      </div>\n                      <div className=\"card-body\">\n                        <div id=\"chart\">\n                          <div style={{height:250}}>\n                            <ProfileChart profile={profile} />\n                          </div>\n                        </div>\n\n                        <div>\n                          <TimeElapsed profile={profile} />\n                          <h4 style={{textAlign:'center', margin:'-.6em 0 0'}}>\n                            <span className={\"badge \" + statusClass}>\n                              {statusText}\n                            </span>\n                          </h4>\n                        </div>\n                      </div>\n                      <div class=\"card-footer\">\n                        {this.paramJsx('T(r)', Tr)}\n                        {this.paramJsx('T(k)', Tk, TkDate)}\n                        {this.paramJsx('alpha', alpha)}\n                        {this.paramJsx('MA', ma, maDate)}\n                        {this.paramJsx('LY30', ly30ratio, ly30Date)}\n                        <strong>Events</strong>\n                        <hr/>\n                        {this.detailJsx('Initialized', createdAt)}\n                        {this.detailJsx('Inserted cartridge', cartridgeInsertedAt)}\n                        {this.detailJsx('Injected blood', bloodInjectedAt)}\n                        {this.detailJsx('Test Began', testBeganAt)}\n                        {this.detailJsx('Test Ended', testEndedAt)}\n                        <strong>Information</strong>\n                        {this.detailJsx('Source', source)}\n\n                        <div class=\"text-right\">\n                          <a href=\"#\" class=\"card-link text-danger\" onClick={() => {\n                            _this.deleteProfile(profile.id)\n                          }}>Archive</a>\n                        </div>\n\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"col-md-5\">\n                    <PatientCard patientId={patient != null ? patient.id : null} />\n                  </div>\n                </div>\n\n            )\n          }}\n        </Query>\n    );\n  }\n\n  paramJsx(label, value, timestamp) {\n    return (\n      <div className=\"row\">\n        <div class=\"col-3\">\n          <h5>{label}</h5>\n        </div>\n        <div class=\"col-5 text-right\">\n          <span class=\"text-muted\">Value</span><br/>\n          {timestamp != null ? <span class=\"text-muted\">Timestamp</span> : null}\n        </div>\n        <div class=\"col-4\" style={{fontWeight:700}}>\n          {value}<br/>\n          {timestamp}\n        </div>\n\n        <div class=\"col-12\">\n          <hr/>\n        </div>\n      </div>\n      );\n  }\n\n  detailJsx(label, value) {\n    return (\n      <div className=\"row\">\n        <div class=\"col-4 text-right\">\n          <span class=\"text-muted\">{label}</span><br/>\n        </div>\n        <div class=\"col-8\">\n          {value}\n        </div>\n        <div class=\"col-12\">\n          <hr/>\n        </div>\n      </div>\n      );\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_e...pi/axis.md\nexport default compose(\n  graphql(UPDATE_PROFILE_MUTATION, {name: 'updateProfileMutation'}))\n(SingleProfile)\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsedString from './TimeElapsedString'\n\nimport {PATIENT_PROFILES} from './patient'\n\nclass PatientProfiles extends Component {\n\n  render() {\n    let _this = this\n\n    return (\n        <div class=\"list-group list-group-flush\">\n          <div class=\"list-group-item sticky-top list-group-item-light\">\n            <div class=\"row \">\n              <div class=\"col-sm-2 font-weight-bold\">Patient Name</div>\n              <div class=\"col-sm-2\">Began At</div>\n              <div class=\"col-sm-2\">Oscillations</div>\n              <div class=\"col-sm-4 source-col\">Source</div>\n              <div class=\"col-sm-2\">\n                <span className={\"badge badge-pill badge-light\"}>Test Status</span>\n              </div>\n            </div>\n          </div>\n\n          <Query query={PATIENT_PROFILES} variables={{id: this.props.patientId}} pollInterval={5000}>\n            {({ loading, error, data }) => {\n              if (loading) return <div>Loading...</div>;\n              if (error) return <div>`Error! ${error.message}`</div>;\n              return (\n                  data.patient.profiles.map(profile => {\n\n                    let patient = profile.patient\n\n                    let statusText = (profile.status < 2) ? \"In Progress\" : \"Completed\"\n                    let statusClass = (profile.status < 2) ? \"badge-info\" : \"badge-success\"\n\n                    let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n                    let testBeganAt = profile.testBeganAt == null ? \"Waiting...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n                    let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n                    let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n                    let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n                    let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n                    let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n                    let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n\n\n                    return (\n                      <a href={\"/profile/\"+profile.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                        <div class=\"row\" key={profile.id}>\n                          <div class=\"col-sm-2\"><strong>{patientName}</strong></div>\n                          \n                          <div class=\"col-sm-2\">{testBeganAt}</div>\n\n                          <div class=\"col-sm-2\">{profile.oscillations.length} Oscillations</div>\n                          <div class=\"col-sm-4 source-col\">{source}</div>\n                          <div class=\"col-sm-2\">\n                            <span className={\"badge badge-pill \" + statusClass}>\n                              {statusText}\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                    )\n                  })\n                )\n            }}\n          </Query>\n      </div>\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default PatientProfiles\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport PatientCard from './PatientCard'\nimport PatientProfiles from './PatientProfiles'\n\nimport {GET_PATIENT} from './patient'\n\nclass SinglePatient extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let _this = this\n\n    return (\n      <div class=\"patient-page\">\n        <div class=\"col-md-5\">\n          <a class=\"btn btn-link\" href={\"/patients\"+(window.location.pathname.includes('api') ? '/api' : '')}>← All Patients</a>\n          <PatientCard patientId={_this.props.match.params.id } />\n        </div>\n        <div class=\"col-md-7\">\n          <PatientProfiles patientId={_this.props.match.params.id} />\n        </div>\n      </div>\n    );\n  }\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default SinglePatient\n","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Nav extends Component {\n\trender() {\n\t\treturn (\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        \n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav\">\n            <NavLink to=\"/patients\" className=\"nav-item nav-link\" activeClassName=\"active\">Patients</NavLink>\n            <NavLink to=\"/profiles\" className=\"nav-item nav-link\" activeClassName=\"active\">Profiles</NavLink>\n          </ul>\n\n        </div>\n        <a class=\"navbar-brand\" href=\"#\">\n          <img src=\"/ifirst.png\" width=\"30\" height=\"30\"/>\n        </a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n      </nav>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\n\nimport TimeElapsed from './TimeElapsed'\nimport TimeElapsedString from './TimeElapsedString'\nimport ProfileChart from './ProfileChart'\nimport Nav from './Nav'\n\nimport {ALL_PROFILES} from './profile'\n\nclass ProfileList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      profile: {\n        testBeganAt: 'N/A',\n        oscillations: []},\n      patient: {\n        name:'Unnamed Patient'\n      }\n    }\n  }\n\n  render() {\n    let _this = this\n\n    return (\n      <div class=\"profiles-list\">\n          <h1>Profiles</h1>\n          <div class=\"list-group list-group-flush\">\n            <div class=\"list-group-item sticky-top list-group-item-light\">\n              <div class=\"row\">\n                <div class=\"col-sm-2 font-weight-bold\">Patient Name</div>\n                <div class=\"col-sm-2\">Began At</div>\n                <div class=\"col-sm-2\">Oscillations</div>\n                <div class=\"col-sm-4 source-col\">Source</div>\n                <div class=\"col-sm-2\">\n                  <span className={\"badge badge-pill badge-light\"}>Test Status</span>\n                </div>\n              </div>\n            </div>\n\n            <Query query={ALL_PROFILES} pollInterval={5000}>\n              {({ loading, error, data }) => {\n                if (loading) return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n                if (error) return <div>`Error! ${error.message}`</div>;\n                return (\n                    data.allProfiles.map(profile => {\n\n                      let patient = profile.patient\n\n                      let statusText = (profile.status < 2) ? \"In Progress\" : \"Completed\"\n                      let statusClass = (profile.status < 2) ? \"badge-info\" : \"badge-success\"\n\n                      let patientName = (patient == null) ? \"Unnamed Patient\" : patient.name\n                      let testBeganAt = profile.testBeganAt == null ? \"Waiting...\" : new Date(Date.parse(profile.testBeganAt)).toLocaleString()\n                      let source = profile.videoName == null ? \"Back-Facing Camera\" : profile.videoName\n\n                      let Tr = profile.rOscillation == null ? \"...\" : TimeElapsedString(profile.rOscillation.maxDate)\n                      let Tk = profile.kOscillation == null ? \"...\" : TimeElapsedString(profile.kOscillation.maxDate - profile.rOscillation.maxDate)\n                      let alpha = profile.alphaAngle == null ? \"...\" : profile.alphaAngle.toFixed(3) + 'º'\n                      let ma = profile.maOscillation == null ? \"...\" : profile.maOscillation.coagulationIndex.toFixed(3) + ' mm'\n                      let ly30ratio = profile.ly30Ratio == null ? \"...\" : (profile.ly30Ratio * 100).toFixed(3) + '%'\n\n\n                      return (\n                        <a href={\"/profile/\"+profile.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                          <div class=\"row\" key={profile.id}>\n                            <div class=\"col-sm-2\"><strong>{patientName}</strong></div>\n                            <div class=\"col-sm-2\">{testBeganAt}</div>\n                            <div class=\"col-sm-2\">{profile.oscillations.length} Oscillations</div>\n                            <div class=\"col-sm-4 source-col\">{source}</div>\n                            <div class=\"col-sm-2\">\n                              <span className={\"badge badge-pill \" + statusClass}>\n                                {statusText}\n                              </span>\n                            </div>\n\n                          </div>\n                        </a>\n                      )\n                    })\n                  )\n              }}\n            </Query>\n            </div>\n      </div>\n\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default ProfileList\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { graphql, compose, Query } from 'react-apollo'\nimport Nav from './Nav'\n\nimport {ALL_PATIENTS} from './patient'\n\nclass PatientList extends Component {\n  // constructor(props) {\n  //   super(props)\n  //   }\n  // }\n\n  render() {\n    let _this = this\n\n    return (\n      <div>\n        <h1>Patients</h1>\n        <div class=\"list-group list-group-flush\">\n          <Query query={ALL_PATIENTS} pollInterval={5000}>\n            {({ loading, error, data }) => {\n              if (loading) return (<div class=\"spinner-overlay\">\n                    <div class=\"spinner center\">\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                      <div class=\"spinner-blade\"></div>\n                    </div>\n                  </div>);\n              if (error) return <div>`Error! ${error.message}`</div>;\n              return (\n                  data.allPatients.map(patient => {\n                    let createdAt = new Date(Date.parse(patient.createdAt)).toLocaleString()\n\n                    return (\n                      <a href={\"/patient/\"+patient.id+(window.location.pathname.includes('api') ? '/api' : '')} class=\"list-group-item list-group-item-action\">\n                        {patient.name || patient.hospitalID || '...'}\n                        <span class=\"badge badge-pill badge-primary float-right\">{patient.profiles.length} Profiles</span>\n                      </a>\n                    )\n                  })\n                )\n            }}\n          </Query>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n//https://github.com/alibaba/BizCharts/blob/master/doc_en/api/axis.md\nexport default PatientList\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SingleProfile from './SingleProfile';\nimport SinglePatient from './SinglePatient';\nimport ProfileList from './ProfileList';\nimport PatientList from './PatientList';\nimport Nav from './Nav';\nimport './App.scss';\nimport 'bootstrap';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\n\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-client-preset'\n\n// const httpLink = new HttpLink({ uri:  process.env.API_BASE })\n// const httpLink = new HttpLink({ uri: 'https://api.graph.cool/simple/v1/cjo4sxik93ih50155txkz8m0i' })\nconst httpLink = new HttpLink({ uri: 'http://localhost:60000/simple/v1/cjo8zndw700060105tz4pbbc5' })\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n    <Router>\n      <ApolloProvider client={client}>\n      \t<div class=\"App-body\">\n\t        {window.location.pathname.includes('api') ? null :  <Nav /> }\n\t        <div class=\"App-content\">\n            <Route exact path=\"/\" component={ProfileList} />\n\t\t        <Route path=\"/profiles\" component={ProfileList} />\n\t\t        <Route path=\"/patients\" component={PatientList} />\n\t\t        <Route path=\"/profile/:id\" component={SingleProfile} />\n\t\t        <Route path=\"/patient/:id\" component={SinglePatient} />\n\t        </div>\n        </div>\n      </ApolloProvider>\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}